---
import Layout from '@/layouts/Layout.astro'
---

<Layout title="LBR - Witch AFK Calculator">
  <main class="flex p-4 flex-col w-full md:max-w-[750px] gap-8">
    <div class="flex flex-row gap-4 items-center justify-center w-full mb-8">
      <img src="/images/witch.png" alt="Witch" class="size-12 md:size-24 -scale-x-100" />
      <h1 class="font-extrabold text-2xl md:text-4xl">Witch Calculator</h1>
      <img src="/images/witch.png" alt="Witch" class="size-12 md:size-24" />
    </div>
    <div class="flex flex-row items-center w-full">
      <img src="/images/player.png" alt="Player" class="size-8 md:size-12" />
      <h2 class="text-xl md:text-2xl font-bold">Player stats</h2>
    </div>

    <div class="grid grid-cols-[repeat(15,_minmax(0,_1fr))] gap-4 md:flex items-end">
      <div class="col-span-5 md:flex-1 gap-2">
        <label for="spawn-cd" class="label text-sm block text-center"> Spawn CD (s)</label>
        <input
          type="number"
          autocomplete="off"
          inputmode="numeric"
          min="145"
          max="180"
          class="input input-sm input-bordered w-full max-w-xs text-center"
          name="spawn-cd"
          value="180"
        />
      </div>
      <div class="col-span-5 md:flex-1 gap-2">
        <label for="essence-kill" class="label text-sm block text-center"> Essence/kill</label>
        <input
          type="number"
          autocomplete="off"
          inputmode="numeric"
          min="0"
          class="input input-sm input-bordered w-full max-w-xs text-center"
          name="essence-kill"
          value="0"
        />
      </div>
      <div class="col-span-5 md:flex-1 gap-2">
        <label for="brew-multi" class="label text-sm block text-center"> Brew multi %</label>
        <input
          type="number"
          autocomplete="off"
          inputmode="numeric"
          min="0"
          class="input input-sm input-bordered w-full max-w-xs text-center"
          name="brew-multi"
          value="0"
        />
      </div>
      <div class="col-start-1 col-end-8 md:flex-1 gap-2">
        <label for="brew-cc" class="label text-sm block text-center"> Brew CC %</label>
        <input
          type="number"
          autocomplete="off"
          inputmode="numeric"
          min="0"
          max="100"
          class="input input-sm input-bordered w-full max-w-xs text-center"
          name="brew-cc"
          value="0"
        />
      </div>
      <div class="col-start-9 col-end-[16] md:flex-1 gap-2">
        <label for="multi-cc" class="label text-sm block text-center"> Multi CC %</label>
        <input
          type="number"
          autocomplete="off"
          inputmode="numeric"
          min="0"
          class="input input-sm input-bordered w-full max-w-xs text-center"
          name="multi-cc"
          value="0"
        />
      </div>
    </div>

    <div class="flex-row items-center flex justify-between w-full">
      <input
        type="number"
        autocomplete="off"
        class="input input-sm input-bordered text-center"
        placeholder="Max material storage"
        name="material-storage"
      />
      <button class="btn btn-sm btn-outline btn-primary" id="save-btn">Save stats</button>
    </div>
    <div class="flex flex-row items-center w-full gap-1">
      <img src="/images/alchemy.png" alt="Alchemy" class="size-8 md:size-12" />
      <h2 class="text-xl md:text-2xl font-bold">Brew stats</h2>
    </div>
    <table class="table table-zebra table-sm md:table-md">
      <thead class="[&>tr>th>img]:mx-auto">
        <th class="text-center text-md">Average</th>
        <th>
          <img src="/images/dark-essence.png" alt="Dark Essence" class="size-6 md:size-8" />
        </th>
        <th>
          <img src="/images/shard.png" alt="Shard" class="size-6 md:size-8" />
        </th>
        <th>
          <img src="/images/transformation-shard.png" alt="Transformation Shard" class="size-6 md:size-8" />
        </th>
        <th>
          <img src="/images/fusion-shard.png" alt="Fusion shard" class="size-6 md:size-8" />
        </th>
        <th>
          <img src="/images/ascension-shard.png" alt="Ascension shard" class="size-6 md:size-8" />
        </th>
      </thead>
      <tbody class="*:text-center">
        <tr>
          <td>Brew</td>
          <td><span id="dark-essence-brew">0</span></td>
          <td><span id="shards-brew">0</span></td>
          <td><span id="transformation-brew">0</span></td>
          <td><span id="fusion-brew">0</span></td>
          <td><span id="ascension-brew">0</span></td>
        </tr>
        <tr>
          <td>Witch kill</td>
          <td><span id="dark-essence-kill">0</span></td>
          <td><span id="shards-kill">0</span></td>
          <td><span id="transformation-kill">0</span></td>
          <td><span id="fusion-kill">0</span></td>
          <td><span id="ascension-kill">0</span></td>
        </tr>
        <tr>
          <td>Hour</td>
          <td><span id="dark-essence-hour">0</span></td>
          <td><span id="shards-hour">0</span></td>
          <td><span id="transformation-hour">0</span></td>
          <td><span id="fusion-hour">0</span></td>
          <td><span id="ascension-hour">0</span></td>
        </tr>
      </tbody>
    </table>
    <div class="flex flex-row gap-4 justify-between items-center">
      <div class="stat">
        <div class="stat-title text-center">Essences/h</div>
        <div class="stat-value text-2xl text-center" id="essences-hour">0</div>
      </div>
      <div class="stat">
        <div class="stat-title text-center">Time to fill storage</div>
        <div class="stat-value text-2xl text-center" id="time-fill-storage">00:00:00</div>
      </div>
    </div>

    <div class="flex flex-row items-center w-full">
      <img src="/images/clock.png" alt="Clock" class="size-8 md:size-12" />
      <h2 class="text-xl md:text-2xl font-bold">AFK Time calculator</h2>
    </div>
    <table class="table table-zebra hidden md:block">
      <thead class="[&>tr>th>div>div>img]:mx-auto [&>tr>th>img]:mx-auto [&>tr>th]:items-end">
        <th></th>
        <th>
          <div class="flex flex-col gap-y-1">
            <div class="flex flex-row gap-x-1">
              <img class="size-4 md:size-8" src="/images/cosmic-essence.png" alt="Cosmic Essence" />
              <img class="size-4 md:size-8" src="/images/leaf-essence.png" alt="Leaf Essence" />
            </div>
            <div class="flex flex-row gap-x-1">
              <img class="size-4 md:size-8" src="/images/water-essence.png" alt="Water Essence" />
              <img class="size-4 md:size-8" src="/images/earth-essence.png" alt="Earth Essence" />
            </div>
          </div>
        </th>
        <th>
          <img class="size-8" src="/images/dark-essence.png" alt="Dark Essence" />
        </th>
        <th>
          <img class="size-8" src="/images/shard.png" alt="Shard" />
        </th>
        <th>
          <img class="size-8" src="/images/transformation-shard.png" alt="Transformation shard" />
        </th>
        <th>
          <img class="size-8" src="/images/fusion-shard.png" alt="Fusion shard" />
        </th>
        <th>
          <img class="size-8" src="/images/ascension-shard.png" alt="Ascension shard" />
        </th>
      </thead>
      <tbody>
        <tr>
          <td>Goal</td>
          <td>
            <input
              type="number"
              autocomplete="off"
              inputmode="numeric"
              min="0"
              class="input input-sm input-bordered w-full max-w-xs text-center"
              name="essences-goal"
              value="0"
            />
          </td>
          <td>
            <input
              type="number"
              autocomplete="off"
              inputmode="numeric"
              min="0"
              class="input input-sm input-bordered w-full max-w-xs text-center"
              name="dark-essence-goal"
              value="0"
            />
          </td>
          <td>
            <input
              type="number"
              autocomplete="off"
              inputmode="numeric"
              min="0"
              class="input input-sm input-bordered w-full max-w-xs text-center"
              name="shards-goal"
              value="0"
            />
          </td>
          <td>
            <input
              type="number"
              autocomplete="off"
              inputmode="numeric"
              min="0"
              class="input input-sm input-bordered w-full max-w-xs text-center"
              name="transformation-shards-goal"
              value="0"
            />
          </td>
          <td>
            <input
              type="number"
              autocomplete="off"
              inputmode="numeric"
              min="0"
              class="input input-sm input-bordered w-full max-w-xs text-center"
              name="fusion-shards-goal"
              value="0"
            />
          </td>
          <td>
            <input
              type="number"
              autocomplete="off"
              inputmode="numeric"
              min="0"
              class="input input-sm input-bordered w-full max-w-xs text-center"
              name="ascension-shards-goal"
              value="0"
            />
          </td>
        </tr>
        <tr class="[&>*:not(:first-child)]:text-center">
          <td> Average time</td>
          <td>
            <span class="time-essences">00:00:00</span>
          </td>
          <td>
            <span class="time-dark-essence">00:00:00</span>
          </td>
          <td>
            <span class="time-shards">00:00:00</span>
          </td>
          <td>
            <span class="time-transformation-shards">00:00:00</span>
          </td>
          <td>
            <span class="time-fusion-shards">00:00:00</span>
          </td>
          <td>
            <span class="time-ascension-shards">00:00:00</span>
          </td>
        </tr>
      </tbody>
    </table>
    <table class="table table-zebra table-sm md:hidden block">
      <thead class="[&>tr>th>div>div>img]:mx-auto [&>tr>th>img]:mx-auto">
        <th></th>
        <th>
          <div class="flex flex-col gap-y-1">
            <div class="flex flex-row gap-x-1">
              <img class="size-6" src="/images/cosmic-essence.png" alt="Cosmic Essence" />
              <img class="size-6" src="/images/leaf-essence.png" alt="Leaf Essence" />
            </div>
            <div class="flex flex-row gap-x-1">
              <img class="size-6" src="/images/water-essence.png" alt="Water Essence" />
              <img class="size-6" src="/images/earth-essence.png" alt="Earth Essence" />
            </div>
          </div>
        </th>
        <th>
          <img class="size-8" src="/images/dark-essence.png" alt="Dark Essence" />
        </th>
        <th>
          <img class="size-8" src="/images/shard.png" alt="Shard" />
        </th>
      </thead>
      <tbody>
        <tr>
          <td>Goal</td>
          <td>
            <input
              type="number"
              autocomplete="off"
              inputmode="numeric"
              min="0"
              class="input input-sm input-bordered w-full max-w-xs text-center"
              name="essences-goal"
              value="0"
            />
          </td>
          <td>
            <input
              type="number"
              autocomplete="off"
              inputmode="numeric"
              min="0"
              class="input input-sm input-bordered w-full max-w-xs text-center"
              name="dark-essence-goal"
              value="0"
            />
          </td>
          <td>
            <input
              type="number"
              autocomplete="off"
              inputmode="numeric"
              min="0"
              class="input input-sm input-bordered w-full max-w-xs text-center"
              name="shards-goal"
              value="0"
            />
          </td>
        </tr>
        <tr class="[&>*:not(:first-child)]:text-center">
          <td> Average time</td>
          <td>
            <span class="time-essences">00:00:00</span>
          </td>
          <td>
            <span class="time-dark-essence">00:00:00</span>
          </td>
          <td>
            <span class="time-shards">00:00:00</span>
          </td>
        </tr>
      </tbody>
    </table>
    <table class="table table-zebra table-sm md:hidden block">
      <thead class="[&>tr>th>div>div>img]:mx-auto [&>tr>th>img]:mx-auto [&>tr>th]:items-end">
        <th></th>
        <th>
          <img class="size-8" src="/images/transformation-shard.png" alt="Transformation shard" />
        </th>
        <th>
          <img class="size-8" src="/images/fusion-shard.png" alt="Fusion shard" />
        </th>
        <th>
          <img class="size-8" src="/images/ascension-shard.png" alt="Ascension shard" />
        </th>
      </thead>
      <tbody>
        <tr>
          <td>Goal</td>
          <td>
            <input
              type="number"
              autocomplete="off"
              inputmode="numeric"
              min="0"
              class="input input-sm input-bordered w-full max-w-xs text-center"
              name="transformation-shards-goal"
              value="0"
            />
          </td>
          <td>
            <input
              type="number"
              autocomplete="off"
              inputmode="numeric"
              min="0"
              class="input input-sm input-bordered w-full max-w-xs text-center"
              name="fusion-shards-goal"
              value="0"
            />
          </td>
          <td>
            <input
              type="number"
              autocomplete="off"
              inputmode="numeric"
              min="0"
              class="input input-sm input-bordered w-full max-w-xs text-center"
              name="ascension-shards-goal"
              value="0"
            />
          </td>
        </tr>
        <tr class="[&>*:not(:first-child)]:text-center">
          <td>Average time</td>
          <td>
            <span class="time-transformation-shards">00:00:00</span>
          </td>
          <td>
            <span class="time-fusion-shards">00:00:00</span>
          </td>
          <td>
            <span class="time-ascension-shards">00:00:00</span>
          </td>
        </tr>
      </tbody>
    </table>
    <div class="toast toast-end hidden animate-fade-left animate-once animate-ease-in-out" id="save-toast">
      <div class="alert alert-info">
        <span>Stats saved succesfully.</span>
      </div>
    </div>
  </main>
</Layout>

<script>
  const $ = (s: string) => document.querySelector(s)
  const $$ = (s: string) => Array.from(document.querySelectorAll(s))

  const $spawnCD = $('input[name="spawn-cd"]') as HTMLInputElement
  const $essenceKill = $('input[name="essence-kill"]') as HTMLInputElement
  const $brewMulti = $('input[name="brew-multi"]') as HTMLInputElement
  const $brewCC = $('input[name="brew-cc"]') as HTMLInputElement
  const $multiCC = $('input[name="multi-cc"]') as HTMLInputElement
  const $materialStorage = $('input[name="material-storage"]') as HTMLInputElement

  const $darkEssenceBrew = $('#dark-essence-brew') as HTMLSpanElement
  const $shardsBrew = $('#shards-brew') as HTMLSpanElement
  const $transformationBrew = $('#transformation-brew') as HTMLSpanElement
  const $fusionBrew = $('#fusion-brew') as HTMLSpanElement
  const $ascensionBrew = $('#ascension-brew') as HTMLSpanElement

  const $darkEssenceKill = $('#dark-essence-kill') as HTMLSpanElement
  const $shardsKill = $('#shards-kill') as HTMLSpanElement
  const $transformationKill = $('#transformation-kill') as HTMLSpanElement
  const $fusionKill = $('#fusion-kill') as HTMLSpanElement
  const $ascensionKill = $('#ascension-kill') as HTMLSpanElement

  const $darkEssenceHour = $('#dark-essence-hour') as HTMLSpanElement
  const $shardsHour = $('#shards-hour') as HTMLSpanElement
  const $transformationHour = $('#transformation-hour') as HTMLSpanElement
  const $fusionHour = $('#fusion-hour') as HTMLSpanElement
  const $ascensionHour = $('#ascension-hour') as HTMLSpanElement

  const $essenceHour = $('#essences-hour') as HTMLSpanElement
  const $timeFillStorage = $('#time-fill-storage') as HTMLSpanElement

  const $saveButton = $('#save-btn') as HTMLButtonElement
  const $saveToast = $('#save-toast') as HTMLDivElement

  interface Stats {
    spawnCD: number
    essenceKill: number
    brewMulti: number
    brewCC: number
    multiCC: number
    materialStorage: number
  }

  const DEFAULT_STATS: Stats = {
    spawnCD: 180,
    essenceKill: 0,
    brewMulti: 0,
    brewCC: 0,
    multiCC: 0,
    materialStorage: 0
  }

  enum BASE_BREW {
    'DARK_ESSENCE' = 5,
    'SHARDS' = 3,
    'SUPERIOR_SHARDS' = 2
  }

  enum BREW_COSTS {
    'DARK_ESSENCE' = 30,
    'SHARDS' = 50,
    'TRANSFORMATION' = 5,
    'FUSION' = 100,
    'ASCENSION' = 200
  }

  const toExponent = (n: number) => (n < 1000 ? `${Number(n.toFixed(2))}` : n.toExponential(2).toString().replace('+', '').replace('.00', ''))

  const parseValue = (v: string) =>
    v.includes('e') ? parseFloat(v.split('e').shift() ?? '0') * Math.pow(10, parseInt(v.split('e').pop() ?? '1')) : parseFloat(v)

  interface InputEvent extends Event {
    target: HTMLInputElement
  }

  function spawnCDValidation(element: HTMLInputElement) {
    const value = parseValue(element.value)
    element.value = value > 180 ? '180' : value < 145 ? '145' : value.toString()
  }

  function essenceKillValidation(element: HTMLInputElement) {
    const value = parseValue(element.value)
    element.value = value < 0 ? '0' : toExponent(value)
  }

  function brewMultiValidation(element: HTMLInputElement) {
    const value = parseValue(element.value)
    element.value = value < 0 ? '0' : value.toString()
  }

  function brewCCValidation(element: HTMLInputElement) {
    const value = parseValue(element.value)
    element.value = value < 0 ? '0' : value > 100 ? '100' : value.toString()
    if (value > 100) {
      const diff = value - 100
      const $multiCC = $('input[name="multi-cc"]') as HTMLInputElement
      $multiCC.value = (parseInt($multiCC.value) + diff).toString()
    }
  }

  function multiCCValidation(element: HTMLInputElement) {
    const value = parseValue(element.value)
    element.value = value < 0 ? '0' : value.toString()
  }

  function materialStorageValidation(element: HTMLInputElement) {
    const value = parseValue(element.value)
    element.value = value <= 0 ? '' : toExponent(value)
  }

  function goalValidation(element: HTMLInputElement) {
    const value = parseValue(element.value)
    const $$inputs = $$(`input[name="${element.name}"]`) as Array<HTMLInputElement>
    for (const $input of $$inputs) {
      $input.value = value < 0 ? '0' : toExponent(value)
    }
  }

  function weightedAverage(values: number[], weights: number[]) {
    const result = values.map((value, i) => [value * weights[i], weights[i]]).reduce((p, c) => [p[0] + c[0], p[1] + c[1]], [0, 0])
    return result[0] / result[1]
  }

  function averageBrewValue(baseBrew: number) {
    const brewMulti = parseValue($brewMulti.value) / 100
    const brewCC = parseValue($brewCC.value) / 100
    const multiCC = parseValue($multiCC.value) / 100

    return weightedAverage(
      [Math.round(baseBrew * (1 + brewMulti)), Math.round(baseBrew * (1 + brewMulti) * 2), Math.round(baseBrew * (1 + brewMulti) * 3)],
      [1 - (brewCC - multiCC) - brewCC * multiCC, brewCC - brewCC * multiCC, brewCC * multiCC]
    )
  }

  const averageBrew = (baseBrew: number) => toExponent(averageBrewValue(baseBrew))

  function averageKillValue(materialPerKill: number, brewCost: number, averageBrew: number) {
    return materialPerKill / (brewCost / averageBrew)
  }

  function averageKill(materialPerKill: number, brewCost: number, averageBrew: number) {
    return toExponent(averageKillValue(materialPerKill, brewCost, averageBrew))
  }

  function calculateBrews() {
    $darkEssenceBrew.textContent = averageBrew(BASE_BREW.DARK_ESSENCE)
    $shardsBrew.textContent = averageBrew(BASE_BREW.SHARDS)
    $transformationBrew.textContent = averageBrew(BASE_BREW.SUPERIOR_SHARDS)
    $fusionBrew.textContent = averageBrew(BASE_BREW.SUPERIOR_SHARDS)
    $ascensionBrew.textContent = averageBrew(BASE_BREW.SUPERIOR_SHARDS)
  }

  function calculateKills() {
    const essenceKill = parseValue($essenceKill.value)
    const darkEssenceAverageKill = averageKillValue(essenceKill, BREW_COSTS.DARK_ESSENCE, averageBrewValue(BASE_BREW.DARK_ESSENCE))
    $darkEssenceKill.textContent = toExponent(darkEssenceAverageKill)
    $shardsKill.textContent = averageKill(darkEssenceAverageKill, BREW_COSTS.SHARDS, averageBrewValue(BASE_BREW.SHARDS))
    $transformationKill.textContent = averageKill(darkEssenceAverageKill, BREW_COSTS.TRANSFORMATION, averageBrewValue(BASE_BREW.SUPERIOR_SHARDS))
    $fusionKill.textContent = averageKill(darkEssenceAverageKill, BREW_COSTS.FUSION, averageBrewValue(BASE_BREW.SUPERIOR_SHARDS))
    $ascensionKill.textContent = averageKill(darkEssenceAverageKill, BREW_COSTS.ASCENSION, averageBrewValue(BASE_BREW.SUPERIOR_SHARDS))
  }

  const calculateAvgHourValue = (spawnCd: number, avgPerKill: number) => (3600 / spawnCd) * avgPerKill
  const calculateAvgHour = (spawnCd: number, avgPerKill: number) => toExponent(calculateAvgHourValue(spawnCd, avgPerKill))

  function calculateHours() {
    const spawnCd = parseValue($spawnCD.value)
    const darkEssenceAverageKill = parseValue($darkEssenceKill.textContent ?? '0')
    const shardsAverageKill = parseValue($shardsKill.textContent ?? '0')
    const transformationAverageKill = parseValue($transformationKill.textContent ?? '0')
    const fusionAverageKill = parseValue($fusionKill.textContent ?? '0')
    const ascensionAverageKill = parseValue($ascensionKill.textContent ?? '0')

    $darkEssenceHour.textContent = calculateAvgHour(spawnCd, darkEssenceAverageKill)
    $shardsHour.textContent = calculateAvgHour(spawnCd, shardsAverageKill)
    $transformationHour.textContent = calculateAvgHour(spawnCd, transformationAverageKill)
    $fusionHour.textContent = calculateAvgHour(spawnCd, fusionAverageKill)
    $ascensionHour.textContent = calculateAvgHour(spawnCd, ascensionAverageKill)
  }

  function calculateBrewStats() {
    calculateBrews()
    calculateKills()
    calculateHours()

    const spawnCd = parseValue($spawnCD.value)
    const essencesKill = parseValue($essenceKill.value)
    const essenceHour = (3600 / spawnCd) * essencesKill
    $essenceHour.textContent = toExponent(essenceHour)

    const date = new Date(0)
    date.setSeconds((parseValue($materialStorage.value) / essenceHour) * 3600)
    $timeFillStorage.textContent = date.toISOString().split('T').pop()?.split('.')[0] ?? '00:00'
  }

  function calculateAFKTime(name: string, avgPerKillElement: HTMLInputElement | HTMLSpanElement) {
    const $$inputs = $$(`input[name="${name}-goal"]`) as Array<HTMLInputElement>
    const $input = $$inputs.find((e) => e.offsetParent != null)
    const spawnCd = parseValue($spawnCD.value)
    if ($input != null) {
      let avgPerKill

      if (avgPerKillElement instanceof HTMLInputElement) {
        avgPerKill = parseValue(avgPerKillElement.value ?? '0')
      } else {
        avgPerKill = parseValue(avgPerKillElement.textContent ?? '0')
      }

      const avgHour = calculateAvgHourValue(spawnCd, avgPerKill)
      const goal = parseValue($input.value)
      const date = new Date(0)
      date.setSeconds((goal / avgHour) * 3600)
      const $$times = $$(`.time-${name}`) as Array<HTMLSpanElement>
      for (const $time of $$times) {
        $time.textContent = date.toISOString().split('T').pop()?.split('.')[0] ?? '00:00'
      }
    }
  }

  function calculateAFKStats() {
    calculateAFKTime('essences', $essenceKill)
    calculateAFKTime('dark-essence', $darkEssenceKill)
    calculateAFKTime('shards', $shardsKill)
    calculateAFKTime('transformation-shards', $transformationKill)
    calculateAFKTime('fusion-shards', $fusionKill)
    calculateAFKTime('ascension-shards', $ascensionKill)
  }

  function calculateStats() {
    calculateBrewStats()
    calculateAFKStats()
  }

  function validateAll() {
    spawnCDValidation($spawnCD)
    essenceKillValidation($essenceKill)
    brewMultiValidation($brewMulti)
    brewCCValidation($brewCC)
    multiCCValidation($multiCC)
    materialStorageValidation($materialStorage)
  }

  function inputHandler(event: Event) {
    const { target } = event as InputEvent

    switch (target.name) {
      case 'spawn-cd':
        spawnCDValidation(target)
        break

      case 'essence-kill':
        essenceKillValidation(target)
        break

      case 'brew-multi':
        brewMultiValidation(target)
        break

      case 'brew-cc':
        brewCCValidation(target)
        break

      case 'multi-cc':
        multiCCValidation(target)
        break

      case 'material-storage':
        materialStorageValidation(target)
        break

      case 'essences-goal':
      case 'shards-goal':
      case 'dark-essence-goal':
      case 'transformation-shards-goal':
      case 'fusion-shards-goal':
      case 'ascension-shards-goal':
        goalValidation(target)
        break

      default:
        console.log(target.name)
    }

    calculateStats()
  }

  const inputs = $$('input') as Array<HTMLInputElement>
  inputs.forEach((input) => {
    input.addEventListener('focusout', inputHandler)
  })

  const debounce = (fn: Function, delay: number) => {
    let timer = 0

    return () => {
      clearTimeout(timer)
      timer = setTimeout(() => {
        fn()
      }, delay)
    }
  }

  function saveStats() {
    const stats: Stats = {
      spawnCD: parseValue($spawnCD.value),
      essenceKill: parseValue($essenceKill.value),
      brewMulti: parseValue($brewMulti.value),
      brewCC: parseValue($brewCC.value),
      multiCC: parseValue($multiCC.value),
      materialStorage: parseValue($materialStorage.value)
    }

    localStorage.setItem('lbr-witch-afk-calculator', JSON.stringify(stats))

    $saveToast.classList.remove('hidden')
    setTimeout(() => {
      $saveToast.classList.add('hidden')
    }, 3000)
  }

  $saveButton.addEventListener('click', debounce(saveStats, 500))

  function loadStats() {
    const storageData = localStorage.getItem('lbr-witch-afk-calculator')
    const stats: Stats = storageData != null ? JSON.parse(storageData) : DEFAULT_STATS

    $spawnCD.value = stats.spawnCD.toString()
    $essenceKill.value = toExponent(stats.essenceKill)
    $brewMulti.value = stats.brewMulti.toString()
    $brewCC.value = stats.brewCC.toString()
    $multiCC.value = stats.multiCC.toString()
    $materialStorage.value = toExponent(stats.materialStorage)

    validateAll()
    calculateStats()
  }

  loadStats()
</script>
